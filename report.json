{
  "stats": {
    "suites": 15,
    "tests": 43,
    "passes": 43,
    "pending": 0,
    "failures": 0,
    "start": "2021-04-21T05:30:03.696Z",
    "end": "2021-04-21T05:30:03.719Z",
    "duration": 23
  },
  "tests": [
    {
      "title": "변경된 객체는 다음과 같은 형태로 변경되어야 합니다.",
      "fullTitle": "destructing destructing 변경된 객체는 다음과 같은 형태로 변경되어야 합니다.",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "original 객체는 변경이 없어야 합니다.",
      "fullTitle": "destructing destructing original 객체는 변경이 없어야 합니다.",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "original 객체와 변경된 객체는 서로 다른 참조를 갖고 있습니다.",
      "fullTitle": "destructing destructing original 객체와 변경된 객체는 서로 다른 참조를 갖고 있습니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "변경된 객체는 original 객체를 이용하며, spread/rest syntax를 사용해야 합니다.",
      "fullTitle": "destructing destructing 변경된 객체는 original 객체를 이용하며, spread/rest syntax를 사용해야 합니다.",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "add 메소드가 존재해야 합니다.",
      "fullTitle": "queue Queue add 메소드가 존재해야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "remove 메소드가 존재해야 합니다.",
      "fullTitle": "queue Queue remove 메소드가 존재해야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "add 후 remove한 결과를 통해 같은 아이템을 조회할 수 있어야 합니다.",
      "fullTitle": "queue Queue add 후 remove한 결과를 통해 같은 아이템을 조회할 수 있어야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "remove는 항상 먼저 추가한 아이템을 삭제해야 합니다.",
      "fullTitle": "queue Queue remove는 항상 먼저 추가한 아이템을 삭제해야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "Queue에 아무런 아이템도 없을 경우, remove시 undefined가 리턴되어야 합니다.",
      "fullTitle": "queue Queue Queue에 아무런 아이템도 없을 경우, remove시 undefined가 리턴되어야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "생성자로 호출 가능해야 합니다.",
      "fullTitle": "js-inheritance Horse 생성자로 호출 가능해야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "name 속성이 존재해야 합니다.",
      "fullTitle": "js-inheritance Horse name 속성이 존재해야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "name은 생성자에서 설정이 가능해야 합니다.",
      "fullTitle": "js-inheritance Horse name은 생성자에서 설정이 가능해야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "goSomewhere 메소드가 존재해야 합니다.",
      "fullTitle": "js-inheritance Horse goSomewhere 메소드가 존재해야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "각각의 인스턴스에 대해 메소드가 매번 새로 작성되는 것이 아닙니다.",
      "fullTitle": "js-inheritance Horse 각각의 인스턴스에 대해 메소드가 매번 새로 작성되는 것이 아닙니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "Horse 프로토타입으로부터 goSomewhere 메소드를 가져와야 합니다.",
      "fullTitle": "js-inheritance Horse Horse 프로토타입으로부터 goSomewhere 메소드를 가져와야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "생성자로 호출 가능해야 합니다.",
      "fullTitle": "js-inheritance FlyingHorse 생성자로 호출 가능해야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "name 및 color 속성이 존재해야 합니다.",
      "fullTitle": "js-inheritance FlyingHorse name 및 color 속성이 존재해야 합니다.",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "name 및 color 속성은 생성자에서 설정이 가능해야 합니다.",
      "fullTitle": "js-inheritance FlyingHorse name 및 color 속성은 생성자에서 설정이 가능해야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "goSomewhere 메소드가 존재해야 합니다.",
      "fullTitle": "js-inheritance FlyingHorse goSomewhere 메소드가 존재해야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "goSomewhere 메소드를 이용해 말이 날아가야 합니다!",
      "fullTitle": "js-inheritance FlyingHorse goSomewhere 메소드를 이용해 말이 날아가야 합니다!",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "각각의 인스턴스에 대해 메소드가 매번 새로 작성되는 것이 아닙니다.",
      "fullTitle": "js-inheritance FlyingHorse 각각의 인스턴스에 대해 메소드가 매번 새로 작성되는 것이 아닙니다.",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "Horse의 goSomewhere 메소드는, 상속에 의해 오버라이드 됩니다.",
      "fullTitle": "js-inheritance FlyingHorse Horse의 goSomewhere 메소드는, 상속에 의해 오버라이드 됩니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "goSomewhere 메소드는 FlyingHorse 프로토타입으로부터 가져와야 합니다.",
      "fullTitle": "js-inheritance FlyingHorse goSomewhere 메소드는 FlyingHorse 프로토타입으로부터 가져와야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "sport.playerNames은 메소드입니다.",
      "fullTitle": "this sport.playerNames sport.playerNames은 메소드입니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "텍스트가 담긴 배열을 리턴합니다.",
      "fullTitle": "this sport.playerNames 텍스트가 담긴 배열을 리턴합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "Tree의 프로토타입에는 map 메소드가 존재합니다.",
      "fullTitle": "tree-map tree map Tree의 프로토타입에는 map 메소드가 존재합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "인스턴스 생성이 가능해야 합니다.",
      "fullTitle": "tree-map tree map 인스턴스 생성이 가능해야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "map 메소드는 기존 Tree 인스턴스가 아닌, (다른 참조를 갖는) 새로운 트리가 반환합니다.",
      "fullTitle": "tree-map tree map map 메소드는 기존 Tree 인스턴스가 아닌, (다른 참조를 갖는) 새로운 트리가 반환합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "map 메소드는 기존 Tree 인스턴스가 아닌, (다른 참조를 갖는) 새로운 트리가 반환합니다. (depth 1)",
      "fullTitle": "tree-map tree map map 메소드는 기존 Tree 인스턴스가 아닌, (다른 참조를 갖는) 새로운 트리가 반환합니다. (depth 1)",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "map 함수에 전달하는 매핑 함수가 있는 그대로를 반환할 경우, 동일한 모양의 트리가 반환됩니다. (depth 0)",
      "fullTitle": "tree-map tree map map 함수에 전달하는 매핑 함수가 있는 그대로를 반환할 경우, 동일한 모양의 트리가 반환됩니다. (depth 0)",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "map 함수에 전달하는 매핑 함수가 있는 그대로를 반환할 경우, 동일한 모양의 트리가 반환됩니다. (depth 1)",
      "fullTitle": "tree-map tree map map 함수에 전달하는 매핑 함수가 있는 그대로를 반환할 경우, 동일한 모양의 트리가 반환됩니다. (depth 1)",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "map 함수에 전달하는 매핑 함수가 있는 그대로를 반환할 경우, 동일한 모양의 트리가 반환됩니다. (depth 2)",
      "fullTitle": "tree-map tree map map 함수에 전달하는 매핑 함수가 있는 그대로를 반환할 경우, 동일한 모양의 트리가 반환됩니다. (depth 2)",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "map 함수에 전달하는 매핑 함수가 있는 그대로를 반환할 경우, 동일한 모양의 트리가 반환됩니다. (depth 3)",
      "fullTitle": "tree-map tree map map 함수에 전달하는 매핑 함수가 있는 그대로를 반환할 경우, 동일한 모양의 트리가 반환됩니다. (depth 3)",
      "duration": 2,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "map 함수에 전달하는 매핑 함수가 값의 두배를 반환할 경우, 두배 값을 가진 트리가 반환됩니다. (depth 0)",
      "fullTitle": "tree-map tree map map 함수에 전달하는 매핑 함수가 값의 두배를 반환할 경우, 두배 값을 가진 트리가 반환됩니다. (depth 0)",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "map 함수에 전달하는 매핑 함수가 값의 두배를 반환할 경우, 두배 값을 가진 트리가 반환됩니다. (depth 1)",
      "fullTitle": "tree-map tree map map 함수에 전달하는 매핑 함수가 값의 두배를 반환할 경우, 두배 값을 가진 트리가 반환됩니다. (depth 1)",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "map 함수에 전달하는 매핑 함수가 값의 두배를 반환할 경우, 두배 값을 가진 트리가 반환됩니다. (depth 2)",
      "fullTitle": "tree-map tree map map 함수에 전달하는 매핑 함수가 값의 두배를 반환할 경우, 두배 값을 가진 트리가 반환됩니다. (depth 2)",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "map 함수에 전달하는 매핑 함수가 값의 두배를 반환할 경우, 두배 값을 가진 트리가 반환됩니다. (depth 3)",
      "fullTitle": "tree-map tree map map 함수에 전달하는 매핑 함수가 값의 두배를 반환할 경우, 두배 값을 가진 트리가 반환됩니다. (depth 3)",
      "duration": 2,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "printArray는 함수여야 합니다.",
      "fullTitle": "recursion-print-array Recursive Array Print printArray는 함수여야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "순서대로 배열의 모든 항목을 console.log() 해야 합니다.",
      "fullTitle": "recursion-print-array Recursive Array Print 순서대로 배열의 모든 항목을 console.log() 해야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "빈 배열도 받아들일 수 있어야 합니다.",
      "fullTitle": "recursion-print-array Recursive Array Print 빈 배열도 받아들일 수 있어야 합니다.",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "sumSquaresTimeComplexity 함수는 'LINEAR' 시간 복잡도를 갖습니다.",
      "fullTitle": "time-complexity algorithm time complexity sumSquaresTimeComplexity 함수는 'LINEAR' 시간 복잡도를 갖습니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "nthPowerTimeComplexity 함수는 'LOGARITHMIC' 시간 복잡도를 갖습니다.",
      "fullTitle": "time-complexity algorithm time complexity nthPowerTimeComplexity 함수는 'LOGARITHMIC' 시간 복잡도를 갖습니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "rockPaperScissorsTimeComplexity 함수는 'EXPONENTIAL' 시간 복잡도를 갖습니다. ",
      "fullTitle": "time-complexity algorithm time complexity rockPaperScissorsTimeComplexity 함수는 'EXPONENTIAL' 시간 복잡도를 갖습니다. ",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    }
  ],
  "pending": [],
  "failures": [],
  "passes": [
    {
      "title": "변경된 객체는 다음과 같은 형태로 변경되어야 합니다.",
      "fullTitle": "destructing destructing 변경된 객체는 다음과 같은 형태로 변경되어야 합니다.",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "original 객체는 변경이 없어야 합니다.",
      "fullTitle": "destructing destructing original 객체는 변경이 없어야 합니다.",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "original 객체와 변경된 객체는 서로 다른 참조를 갖고 있습니다.",
      "fullTitle": "destructing destructing original 객체와 변경된 객체는 서로 다른 참조를 갖고 있습니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "변경된 객체는 original 객체를 이용하며, spread/rest syntax를 사용해야 합니다.",
      "fullTitle": "destructing destructing 변경된 객체는 original 객체를 이용하며, spread/rest syntax를 사용해야 합니다.",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "add 메소드가 존재해야 합니다.",
      "fullTitle": "queue Queue add 메소드가 존재해야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "remove 메소드가 존재해야 합니다.",
      "fullTitle": "queue Queue remove 메소드가 존재해야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "add 후 remove한 결과를 통해 같은 아이템을 조회할 수 있어야 합니다.",
      "fullTitle": "queue Queue add 후 remove한 결과를 통해 같은 아이템을 조회할 수 있어야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "remove는 항상 먼저 추가한 아이템을 삭제해야 합니다.",
      "fullTitle": "queue Queue remove는 항상 먼저 추가한 아이템을 삭제해야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "Queue에 아무런 아이템도 없을 경우, remove시 undefined가 리턴되어야 합니다.",
      "fullTitle": "queue Queue Queue에 아무런 아이템도 없을 경우, remove시 undefined가 리턴되어야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "생성자로 호출 가능해야 합니다.",
      "fullTitle": "js-inheritance Horse 생성자로 호출 가능해야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "name 속성이 존재해야 합니다.",
      "fullTitle": "js-inheritance Horse name 속성이 존재해야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "name은 생성자에서 설정이 가능해야 합니다.",
      "fullTitle": "js-inheritance Horse name은 생성자에서 설정이 가능해야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "goSomewhere 메소드가 존재해야 합니다.",
      "fullTitle": "js-inheritance Horse goSomewhere 메소드가 존재해야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "각각의 인스턴스에 대해 메소드가 매번 새로 작성되는 것이 아닙니다.",
      "fullTitle": "js-inheritance Horse 각각의 인스턴스에 대해 메소드가 매번 새로 작성되는 것이 아닙니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "Horse 프로토타입으로부터 goSomewhere 메소드를 가져와야 합니다.",
      "fullTitle": "js-inheritance Horse Horse 프로토타입으로부터 goSomewhere 메소드를 가져와야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "생성자로 호출 가능해야 합니다.",
      "fullTitle": "js-inheritance FlyingHorse 생성자로 호출 가능해야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "name 및 color 속성이 존재해야 합니다.",
      "fullTitle": "js-inheritance FlyingHorse name 및 color 속성이 존재해야 합니다.",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "name 및 color 속성은 생성자에서 설정이 가능해야 합니다.",
      "fullTitle": "js-inheritance FlyingHorse name 및 color 속성은 생성자에서 설정이 가능해야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "goSomewhere 메소드가 존재해야 합니다.",
      "fullTitle": "js-inheritance FlyingHorse goSomewhere 메소드가 존재해야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "goSomewhere 메소드를 이용해 말이 날아가야 합니다!",
      "fullTitle": "js-inheritance FlyingHorse goSomewhere 메소드를 이용해 말이 날아가야 합니다!",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "각각의 인스턴스에 대해 메소드가 매번 새로 작성되는 것이 아닙니다.",
      "fullTitle": "js-inheritance FlyingHorse 각각의 인스턴스에 대해 메소드가 매번 새로 작성되는 것이 아닙니다.",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "Horse의 goSomewhere 메소드는, 상속에 의해 오버라이드 됩니다.",
      "fullTitle": "js-inheritance FlyingHorse Horse의 goSomewhere 메소드는, 상속에 의해 오버라이드 됩니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "goSomewhere 메소드는 FlyingHorse 프로토타입으로부터 가져와야 합니다.",
      "fullTitle": "js-inheritance FlyingHorse goSomewhere 메소드는 FlyingHorse 프로토타입으로부터 가져와야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "sport.playerNames은 메소드입니다.",
      "fullTitle": "this sport.playerNames sport.playerNames은 메소드입니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "텍스트가 담긴 배열을 리턴합니다.",
      "fullTitle": "this sport.playerNames 텍스트가 담긴 배열을 리턴합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "Tree의 프로토타입에는 map 메소드가 존재합니다.",
      "fullTitle": "tree-map tree map Tree의 프로토타입에는 map 메소드가 존재합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "인스턴스 생성이 가능해야 합니다.",
      "fullTitle": "tree-map tree map 인스턴스 생성이 가능해야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "map 메소드는 기존 Tree 인스턴스가 아닌, (다른 참조를 갖는) 새로운 트리가 반환합니다.",
      "fullTitle": "tree-map tree map map 메소드는 기존 Tree 인스턴스가 아닌, (다른 참조를 갖는) 새로운 트리가 반환합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "map 메소드는 기존 Tree 인스턴스가 아닌, (다른 참조를 갖는) 새로운 트리가 반환합니다. (depth 1)",
      "fullTitle": "tree-map tree map map 메소드는 기존 Tree 인스턴스가 아닌, (다른 참조를 갖는) 새로운 트리가 반환합니다. (depth 1)",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "map 함수에 전달하는 매핑 함수가 있는 그대로를 반환할 경우, 동일한 모양의 트리가 반환됩니다. (depth 0)",
      "fullTitle": "tree-map tree map map 함수에 전달하는 매핑 함수가 있는 그대로를 반환할 경우, 동일한 모양의 트리가 반환됩니다. (depth 0)",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "map 함수에 전달하는 매핑 함수가 있는 그대로를 반환할 경우, 동일한 모양의 트리가 반환됩니다. (depth 1)",
      "fullTitle": "tree-map tree map map 함수에 전달하는 매핑 함수가 있는 그대로를 반환할 경우, 동일한 모양의 트리가 반환됩니다. (depth 1)",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "map 함수에 전달하는 매핑 함수가 있는 그대로를 반환할 경우, 동일한 모양의 트리가 반환됩니다. (depth 2)",
      "fullTitle": "tree-map tree map map 함수에 전달하는 매핑 함수가 있는 그대로를 반환할 경우, 동일한 모양의 트리가 반환됩니다. (depth 2)",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "map 함수에 전달하는 매핑 함수가 있는 그대로를 반환할 경우, 동일한 모양의 트리가 반환됩니다. (depth 3)",
      "fullTitle": "tree-map tree map map 함수에 전달하는 매핑 함수가 있는 그대로를 반환할 경우, 동일한 모양의 트리가 반환됩니다. (depth 3)",
      "duration": 2,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "map 함수에 전달하는 매핑 함수가 값의 두배를 반환할 경우, 두배 값을 가진 트리가 반환됩니다. (depth 0)",
      "fullTitle": "tree-map tree map map 함수에 전달하는 매핑 함수가 값의 두배를 반환할 경우, 두배 값을 가진 트리가 반환됩니다. (depth 0)",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "map 함수에 전달하는 매핑 함수가 값의 두배를 반환할 경우, 두배 값을 가진 트리가 반환됩니다. (depth 1)",
      "fullTitle": "tree-map tree map map 함수에 전달하는 매핑 함수가 값의 두배를 반환할 경우, 두배 값을 가진 트리가 반환됩니다. (depth 1)",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "map 함수에 전달하는 매핑 함수가 값의 두배를 반환할 경우, 두배 값을 가진 트리가 반환됩니다. (depth 2)",
      "fullTitle": "tree-map tree map map 함수에 전달하는 매핑 함수가 값의 두배를 반환할 경우, 두배 값을 가진 트리가 반환됩니다. (depth 2)",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "map 함수에 전달하는 매핑 함수가 값의 두배를 반환할 경우, 두배 값을 가진 트리가 반환됩니다. (depth 3)",
      "fullTitle": "tree-map tree map map 함수에 전달하는 매핑 함수가 값의 두배를 반환할 경우, 두배 값을 가진 트리가 반환됩니다. (depth 3)",
      "duration": 2,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "printArray는 함수여야 합니다.",
      "fullTitle": "recursion-print-array Recursive Array Print printArray는 함수여야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "순서대로 배열의 모든 항목을 console.log() 해야 합니다.",
      "fullTitle": "recursion-print-array Recursive Array Print 순서대로 배열의 모든 항목을 console.log() 해야 합니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "빈 배열도 받아들일 수 있어야 합니다.",
      "fullTitle": "recursion-print-array Recursive Array Print 빈 배열도 받아들일 수 있어야 합니다.",
      "duration": 1,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "sumSquaresTimeComplexity 함수는 'LINEAR' 시간 복잡도를 갖습니다.",
      "fullTitle": "time-complexity algorithm time complexity sumSquaresTimeComplexity 함수는 'LINEAR' 시간 복잡도를 갖습니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "nthPowerTimeComplexity 함수는 'LOGARITHMIC' 시간 복잡도를 갖습니다.",
      "fullTitle": "time-complexity algorithm time complexity nthPowerTimeComplexity 함수는 'LOGARITHMIC' 시간 복잡도를 갖습니다.",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    },
    {
      "title": "rockPaperScissorsTimeComplexity 함수는 'EXPONENTIAL' 시간 복잡도를 갖습니다. ",
      "fullTitle": "time-complexity algorithm time complexity rockPaperScissorsTimeComplexity 함수는 'EXPONENTIAL' 시간 복잡도를 갖습니다. ",
      "duration": 0,
      "currentRetry": 0,
      "err": {}
    }
  ]
}